// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/video.proto

package video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*PublishVideoResp, error)
	GetVideo(ctx context.Context, in *GetVideoReq, opts ...grpc.CallOption) (*GetVideoResp, error)
	GetAllVideoByUserId(ctx context.Context, in *GetAllVideoByUserIdReq, opts ...grpc.CallOption) (*GetAllVideoByUserIdResp, error)
	ChangeVideoComment(ctx context.Context, in *ChangeVideoCommentReq, opts ...grpc.CallOption) (*ChangeVideoCommentResp, error)
	ChangeVideoFavorite(ctx context.Context, in *ChangeVideoFavoriteReq, opts ...grpc.CallOption) (*ChangeVideoFavoriteResp, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) PublishVideo(ctx context.Context, in *PublishVideoReq, opts ...grpc.CallOption) (*PublishVideoResp, error) {
	out := new(PublishVideoResp)
	err := c.cc.Invoke(ctx, "/video.VideoService/PublishVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideo(ctx context.Context, in *GetVideoReq, opts ...grpc.CallOption) (*GetVideoResp, error) {
	out := new(GetVideoResp)
	err := c.cc.Invoke(ctx, "/video.VideoService/GetVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetAllVideoByUserId(ctx context.Context, in *GetAllVideoByUserIdReq, opts ...grpc.CallOption) (*GetAllVideoByUserIdResp, error) {
	out := new(GetAllVideoByUserIdResp)
	err := c.cc.Invoke(ctx, "/video.VideoService/GetAllVideoByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) ChangeVideoComment(ctx context.Context, in *ChangeVideoCommentReq, opts ...grpc.CallOption) (*ChangeVideoCommentResp, error) {
	out := new(ChangeVideoCommentResp)
	err := c.cc.Invoke(ctx, "/video.VideoService/ChangeVideoComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) ChangeVideoFavorite(ctx context.Context, in *ChangeVideoFavoriteReq, opts ...grpc.CallOption) (*ChangeVideoFavoriteResp, error) {
	out := new(ChangeVideoFavoriteResp)
	err := c.cc.Invoke(ctx, "/video.VideoService/ChangeVideoFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	PublishVideo(context.Context, *PublishVideoReq) (*PublishVideoResp, error)
	GetVideo(context.Context, *GetVideoReq) (*GetVideoResp, error)
	GetAllVideoByUserId(context.Context, *GetAllVideoByUserIdReq) (*GetAllVideoByUserIdResp, error)
	ChangeVideoComment(context.Context, *ChangeVideoCommentReq) (*ChangeVideoCommentResp, error)
	ChangeVideoFavorite(context.Context, *ChangeVideoFavoriteReq) (*ChangeVideoFavoriteResp, error)
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) PublishVideo(context.Context, *PublishVideoReq) (*PublishVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishVideo not implemented")
}
func (UnimplementedVideoServiceServer) GetVideo(context.Context, *GetVideoReq) (*GetVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideo not implemented")
}
func (UnimplementedVideoServiceServer) GetAllVideoByUserId(context.Context, *GetAllVideoByUserIdReq) (*GetAllVideoByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVideoByUserId not implemented")
}
func (UnimplementedVideoServiceServer) ChangeVideoComment(context.Context, *ChangeVideoCommentReq) (*ChangeVideoCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeVideoComment not implemented")
}
func (UnimplementedVideoServiceServer) ChangeVideoFavorite(context.Context, *ChangeVideoFavoriteReq) (*ChangeVideoFavoriteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeVideoFavorite not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_PublishVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).PublishVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/PublishVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).PublishVideo(ctx, req.(*PublishVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideo(ctx, req.(*GetVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetAllVideoByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVideoByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetAllVideoByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/GetAllVideoByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetAllVideoByUserId(ctx, req.(*GetAllVideoByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_ChangeVideoComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeVideoCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).ChangeVideoComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/ChangeVideoComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).ChangeVideoComment(ctx, req.(*ChangeVideoCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_ChangeVideoFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeVideoFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).ChangeVideoFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.VideoService/ChangeVideoFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).ChangeVideoFavorite(ctx, req.(*ChangeVideoFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishVideo",
			Handler:    _VideoService_PublishVideo_Handler,
		},
		{
			MethodName: "GetVideo",
			Handler:    _VideoService_GetVideo_Handler,
		},
		{
			MethodName: "GetAllVideoByUserId",
			Handler:    _VideoService_GetAllVideoByUserId_Handler,
		},
		{
			MethodName: "ChangeVideoComment",
			Handler:    _VideoService_ChangeVideoComment_Handler,
		},
		{
			MethodName: "ChangeVideoFavorite",
			Handler:    _VideoService_ChangeVideoFavorite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/video.proto",
}
