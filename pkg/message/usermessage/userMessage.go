// Code generated by goctl. DO NOT EDIT!
// Source: UserMessage.proto

package usermessage

import (
	"context"

	"douyin/pkg/message/userMessagePb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Message        = userMessagePb.Message
	MessageListReq = userMessagePb.MessageListReq
	MessageListRes = userMessagePb.MessageListRes
	MessageReq     = userMessagePb.MessageReq
	MessageRes     = userMessagePb.MessageRes

	UserMessage interface {
		// -----------------------SendMessage-----------------------
		SendMessage(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*MessageRes, error)
		// -----------------------GetMessageList-----------------------
		GetMessageList(ctx context.Context, in *MessageListReq, opts ...grpc.CallOption) (*MessageListRes, error)
	}

	defaultUserMessage struct {
		cli zrpc.Client
	}
)

func NewUserMessage(cli zrpc.Client) UserMessage {
	return &defaultUserMessage{
		cli: cli,
	}
}

// -----------------------SendMessage-----------------------
func (m *defaultUserMessage) SendMessage(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*MessageRes, error) {
	client := userMessagePb.NewUserMessageClient(m.cli.Conn())
	return client.SendMessage(ctx, in, opts...)
}

// -----------------------GetMessageList-----------------------
func (m *defaultUserMessage) GetMessageList(ctx context.Context, in *MessageListReq, opts ...grpc.CallOption) (*MessageListRes, error) {
	client := userMessagePb.NewUserMessageClient(m.cli.Conn())
	return client.GetMessageList(ctx, in, opts...)
}
